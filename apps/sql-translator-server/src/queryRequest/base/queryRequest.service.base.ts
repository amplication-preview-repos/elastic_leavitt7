/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QueryRequest as PrismaQueryRequest,
  ExecutionResult as PrismaExecutionResult,
} from "@prisma/client";

export class QueryRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QueryRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.queryRequest.count(args);
  }

  async queryRequests(
    args: Prisma.QueryRequestFindManyArgs
  ): Promise<PrismaQueryRequest[]> {
    return this.prisma.queryRequest.findMany(args);
  }
  async queryRequest(
    args: Prisma.QueryRequestFindUniqueArgs
  ): Promise<PrismaQueryRequest | null> {
    return this.prisma.queryRequest.findUnique(args);
  }
  async createQueryRequest(
    args: Prisma.QueryRequestCreateArgs
  ): Promise<PrismaQueryRequest> {
    return this.prisma.queryRequest.create(args);
  }
  async updateQueryRequest(
    args: Prisma.QueryRequestUpdateArgs
  ): Promise<PrismaQueryRequest> {
    return this.prisma.queryRequest.update(args);
  }
  async deleteQueryRequest(
    args: Prisma.QueryRequestDeleteArgs
  ): Promise<PrismaQueryRequest> {
    return this.prisma.queryRequest.delete(args);
  }

  async findExecutionResults(
    parentId: string,
    args: Prisma.ExecutionResultFindManyArgs
  ): Promise<PrismaExecutionResult[]> {
    return this.prisma.queryRequest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .executionResults(args);
  }
}
