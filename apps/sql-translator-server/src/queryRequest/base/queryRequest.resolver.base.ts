/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { QueryRequest } from "./QueryRequest";
import { QueryRequestCountArgs } from "./QueryRequestCountArgs";
import { QueryRequestFindManyArgs } from "./QueryRequestFindManyArgs";
import { QueryRequestFindUniqueArgs } from "./QueryRequestFindUniqueArgs";
import { CreateQueryRequestArgs } from "./CreateQueryRequestArgs";
import { UpdateQueryRequestArgs } from "./UpdateQueryRequestArgs";
import { DeleteQueryRequestArgs } from "./DeleteQueryRequestArgs";
import { ExecutionResultFindManyArgs } from "../../executionResult/base/ExecutionResultFindManyArgs";
import { ExecutionResult } from "../../executionResult/base/ExecutionResult";
import { QueryRequestService } from "../queryRequest.service";
@graphql.Resolver(() => QueryRequest)
export class QueryRequestResolverBase {
  constructor(protected readonly service: QueryRequestService) {}

  async _queryRequestsMeta(
    @graphql.Args() args: QueryRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [QueryRequest])
  async queryRequests(
    @graphql.Args() args: QueryRequestFindManyArgs
  ): Promise<QueryRequest[]> {
    return this.service.queryRequests(args);
  }

  @graphql.Query(() => QueryRequest, { nullable: true })
  async queryRequest(
    @graphql.Args() args: QueryRequestFindUniqueArgs
  ): Promise<QueryRequest | null> {
    const result = await this.service.queryRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QueryRequest)
  async createQueryRequest(
    @graphql.Args() args: CreateQueryRequestArgs
  ): Promise<QueryRequest> {
    return await this.service.createQueryRequest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => QueryRequest)
  async updateQueryRequest(
    @graphql.Args() args: UpdateQueryRequestArgs
  ): Promise<QueryRequest | null> {
    try {
      return await this.service.updateQueryRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QueryRequest)
  async deleteQueryRequest(
    @graphql.Args() args: DeleteQueryRequestArgs
  ): Promise<QueryRequest | null> {
    try {
      return await this.service.deleteQueryRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ExecutionResult], { name: "executionResults" })
  async findExecutionResults(
    @graphql.Parent() parent: QueryRequest,
    @graphql.Args() args: ExecutionResultFindManyArgs
  ): Promise<ExecutionResult[]> {
    const results = await this.service.findExecutionResults(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
