/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ExecutionResult } from "./ExecutionResult";
import { ExecutionResultCountArgs } from "./ExecutionResultCountArgs";
import { ExecutionResultFindManyArgs } from "./ExecutionResultFindManyArgs";
import { ExecutionResultFindUniqueArgs } from "./ExecutionResultFindUniqueArgs";
import { CreateExecutionResultArgs } from "./CreateExecutionResultArgs";
import { UpdateExecutionResultArgs } from "./UpdateExecutionResultArgs";
import { DeleteExecutionResultArgs } from "./DeleteExecutionResultArgs";
import { QueryRequest } from "../../queryRequest/base/QueryRequest";
import { ExecutionResultService } from "../executionResult.service";
@graphql.Resolver(() => ExecutionResult)
export class ExecutionResultResolverBase {
  constructor(protected readonly service: ExecutionResultService) {}

  async _executionResultsMeta(
    @graphql.Args() args: ExecutionResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ExecutionResult])
  async executionResults(
    @graphql.Args() args: ExecutionResultFindManyArgs
  ): Promise<ExecutionResult[]> {
    return this.service.executionResults(args);
  }

  @graphql.Query(() => ExecutionResult, { nullable: true })
  async executionResult(
    @graphql.Args() args: ExecutionResultFindUniqueArgs
  ): Promise<ExecutionResult | null> {
    const result = await this.service.executionResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ExecutionResult)
  async createExecutionResult(
    @graphql.Args() args: CreateExecutionResultArgs
  ): Promise<ExecutionResult> {
    return await this.service.createExecutionResult({
      ...args,
      data: {
        ...args.data,

        queryRequest: args.data.queryRequest
          ? {
              connect: args.data.queryRequest,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ExecutionResult)
  async updateExecutionResult(
    @graphql.Args() args: UpdateExecutionResultArgs
  ): Promise<ExecutionResult | null> {
    try {
      return await this.service.updateExecutionResult({
        ...args,
        data: {
          ...args.data,

          queryRequest: args.data.queryRequest
            ? {
                connect: args.data.queryRequest,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExecutionResult)
  async deleteExecutionResult(
    @graphql.Args() args: DeleteExecutionResultArgs
  ): Promise<ExecutionResult | null> {
    try {
      return await this.service.deleteExecutionResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => QueryRequest, {
    nullable: true,
    name: "queryRequest",
  })
  async getQueryRequest(
    @graphql.Parent() parent: ExecutionResult
  ): Promise<QueryRequest | null> {
    const result = await this.service.getQueryRequest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
