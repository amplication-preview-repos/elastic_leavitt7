/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExecutionResultService } from "../executionResult.service";
import { ExecutionResultCreateInput } from "./ExecutionResultCreateInput";
import { ExecutionResult } from "./ExecutionResult";
import { ExecutionResultFindManyArgs } from "./ExecutionResultFindManyArgs";
import { ExecutionResultWhereUniqueInput } from "./ExecutionResultWhereUniqueInput";
import { ExecutionResultUpdateInput } from "./ExecutionResultUpdateInput";

export class ExecutionResultControllerBase {
  constructor(protected readonly service: ExecutionResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExecutionResult })
  async createExecutionResult(
    @common.Body() data: ExecutionResultCreateInput
  ): Promise<ExecutionResult> {
    return await this.service.createExecutionResult({
      data: {
        ...data,

        queryRequest: data.queryRequest
          ? {
              connect: data.queryRequest,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        queryRequest: {
          select: {
            id: true,
          },
        },

        result: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ExecutionResult] })
  @ApiNestedQuery(ExecutionResultFindManyArgs)
  async executionResults(
    @common.Req() request: Request
  ): Promise<ExecutionResult[]> {
    const args = plainToClass(ExecutionResultFindManyArgs, request.query);
    return this.service.executionResults({
      ...args,
      select: {
        createdAt: true,
        id: true,

        queryRequest: {
          select: {
            id: true,
          },
        },

        result: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExecutionResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async executionResult(
    @common.Param() params: ExecutionResultWhereUniqueInput
  ): Promise<ExecutionResult | null> {
    const result = await this.service.executionResult({
      where: params,
      select: {
        createdAt: true,
        id: true,

        queryRequest: {
          select: {
            id: true,
          },
        },

        result: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExecutionResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExecutionResult(
    @common.Param() params: ExecutionResultWhereUniqueInput,
    @common.Body() data: ExecutionResultUpdateInput
  ): Promise<ExecutionResult | null> {
    try {
      return await this.service.updateExecutionResult({
        where: params,
        data: {
          ...data,

          queryRequest: data.queryRequest
            ? {
                connect: data.queryRequest,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          queryRequest: {
            select: {
              id: true,
            },
          },

          result: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExecutionResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExecutionResult(
    @common.Param() params: ExecutionResultWhereUniqueInput
  ): Promise<ExecutionResult | null> {
    try {
      return await this.service.deleteExecutionResult({
        where: params,
        select: {
          createdAt: true,
          id: true,

          queryRequest: {
            select: {
              id: true,
            },
          },

          result: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
